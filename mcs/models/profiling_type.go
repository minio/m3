// Code generated by go-swagger; DO NOT EDIT.

// This file is part of MinIO Console Server
// Copyright (c) 2020 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ProfilingType profiling type
//
// swagger:model profilingType
type ProfilingType string

const (

	// ProfilingTypeCPU captures enum value "cpu"
	ProfilingTypeCPU ProfilingType = "cpu"

	// ProfilingTypeMem captures enum value "mem"
	ProfilingTypeMem ProfilingType = "mem"

	// ProfilingTypeBlock captures enum value "block"
	ProfilingTypeBlock ProfilingType = "block"

	// ProfilingTypeMutex captures enum value "mutex"
	ProfilingTypeMutex ProfilingType = "mutex"

	// ProfilingTypeTrace captures enum value "trace"
	ProfilingTypeTrace ProfilingType = "trace"

	// ProfilingTypeThreads captures enum value "threads"
	ProfilingTypeThreads ProfilingType = "threads"

	// ProfilingTypeGoroutines captures enum value "goroutines"
	ProfilingTypeGoroutines ProfilingType = "goroutines"
)

// for schema
var profilingTypeEnum []interface{}

func init() {
	var res []ProfilingType
	if err := json.Unmarshal([]byte(`["cpu","mem","block","mutex","trace","threads","goroutines"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		profilingTypeEnum = append(profilingTypeEnum, v)
	}
}

func (m ProfilingType) validateProfilingTypeEnum(path, location string, value ProfilingType) error {
	if err := validate.Enum(path, location, value, profilingTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this profiling type
func (m ProfilingType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateProfilingTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
