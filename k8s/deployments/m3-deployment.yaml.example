---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: m3-user
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: m3-user
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: m3-user
  namespace: default
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-user
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k8s-nginx-cm-view-role
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8s-nginx-cm-svc-account
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8s-nginx-cm-view-role
subjects:
- kind: ServiceAccount
  name: nginx-user
  namespace: default
---
apiVersion: v1
kind: Service
metadata:
  labels:
    name: nginx-resolver
  name: nginx-resolver
spec:
  ports:
  - name: http
    port: 80
  selector:
    app: nginx-resolver
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nginx-resolver
    type: nginx-resolver
  name: nginx-resolver
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx-resolver
      type: nginx-resolver
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: nginx-resolver
        type: nginx-resolver
    spec:
      containers:
      - image: minio/m3-nginx:edge
        imagePullPolicy: IfNotPresent
        name: nginx-resolver
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
      serviceAccount: nginx-user
      serviceAccountName: nginx-user
---
apiVersion: v1
kind: Service
metadata:
  name: m3
  labels:
    name: m3
spec:
  ports:
    - port: 50051
      name: public-grpc
    - port: 50052
      name: private-grpc
  selector:
    app: m3
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: m3-env
data:
  ADMIN_NAME: <ADMIN_NAME>
  ADMIN_EMAIL: <ADMIN_EMAIL>
  DB_HOSTNAME: "<POSTGRES_HOSTNAME>"
  # DB Configuration Parameters
  #DB_PORT: "<DB_PORT>"
  #DB_USER: "<DB_USER>"
  #DB_PASSWORD: "<DB_PASSWORD>"
  #DB_NAME: "<DB_NAME>"
  #DB_SSL: "<DB_SSL>"
  #DB_SCHEMA: "<DB_SCHEMA>"
  MAIL_ACCOUNT: <MAIL_ACCOUNT>
  MAIL_SERVER: <MAIL_SERVER>
  MAIL_PASSWORD: <MAIL_PASSWORD>
  APP_URL: <APP_URL>
  S3_DOMAIN: <S3_DOMAIN>
  SETUP_USE_GLOBAL_BUCKETS: "true"
  M3_IMAGE: "minio/m3:edge"
  # Other configs
  # Maximum number of tenants per storage group. 16 is the sweetest number.
  # MAX_NUM_TENANTS_PER_SG: "16"
  # Uncomment these to enable IDP for Admin Login
  #IDENTITY_PROVIDER_URL: ""
  #IDENTITY_PROVIDER_CLIENT_ID: ""
  #IDENTITY_PROVIDER_SECRET: ""
  #IDENTITY_PROVIDER_CALLBACK: ""
  # Uncomment these to enable tenant data encryption using an external KMS
  #KMS_ADDRESS: ""
  #KMS_TOKEN: ""
  #KMS_CA_CERT_CONFIG_MAP: ""
  #KMS_CA_CERT_FILE_NAME: ""
  # Uncomment these to allow KES to use self-signed client certificates
  #KES_M_TLS_AUTH: "ignore"
  #KES_CONFIG_FILE_PATH: "kes-config/server-config.toml"
  # Uncomment to configure the data parity that will be used in the cluster as a whole
  #SETUP_STORAGE_STANDARD_PARITY: "EC:4"
  # Specific Images (uncomment to use instead of default ones):
  #PROMETHEUS_IMAGE : ""
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: m3
spec:
  replicas: 1
  selector:
    matchLabels:
      app: m3
  template:
    metadata:
      labels:
        app: m3
    spec:
      serviceAccountName: m3-user
      containers:
        - name: m3
          image: minio/m3:edge
          imagePullPolicy: "IfNotPresent"
          args:
            - /m3
            - service
          envFrom:
              - configMapRef:
                  name: m3-env
          ports:
            - containerPort: 50051
              name: public-grpc
            - containerPort: 50052
              name: private-grpc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: m3-scheduler
spec:
  replicas: 1
  selector:
    matchLabels:
      app: m3-scheduler
  template:
    metadata:
      labels:
        app: m3-scheduler
    spec:
      serviceAccountName: m3-user
      containers:
        - name: m3
          image: minio/m3:edge
          imagePullPolicy: "IfNotPresent"
          args:
            - /m3
            - scheduler
          envFrom:
            - configMapRef:
                name: m3-env
---
apiVersion: v1
kind: Service
metadata:
  name: m3-portal-backend
  labels:
    name: m3-portal-backend
spec:
  ports:
    - port: 5050
      name: webserver
  selector:
    app: m3-portal-backend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: m3-portal-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: m3-portal-backend
  template:
    metadata:
      labels:
        app: m3-portal-backend
    spec:
      containers:
        - name: m3-portal-backend
          image: minio/m3:edge
          imagePullPolicy: "IfNotPresent"
          args:
            - /m3
            - portal
          env:
            - name: M3_HOSTNAME
              value: "m3"
            - name: M3_PUBLIC_PORT
              value: "50051"
          ports:
            - containerPort: 5050
              name: webserver
---
apiVersion: v1
kind: Service
metadata:
  name: portal-proxy
  labels:
    name: portal-proxy
spec:
  ports:
    - port: 80
      name: webserver
  selector:
    app: portal-proxy
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: portal-proxy-config
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /dev/stdout debug;
    pid /var/run/nginx.pid;

    events {
      worker_connections  1024;
    }

    http {
      log_format  main  '$http_host - $remote_addr - $remote_user [$time_local] "$request" '
      '$status $body_bytes_sent "$http_referer" '
      '"$http_user_agent" "$http_x_forwarded_for"';

      server {

        location ~ ^/api/v[0-9]+/(.*)$ {
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
          client_max_body_size 50M;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_set_header X-Frame-Options SAMEORIGIN;
          proxy_buffers 256 16k;
          proxy_buffer_size 16k;
          client_body_timeout 60;
          send_timeout 300;
          lingering_timeout 5;
          proxy_connect_timeout 90;
          proxy_send_timeout 300;
          proxy_read_timeout 90s;
          proxy_pass http://m3-portal-backend:5050;
        }

        location / {
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
          client_max_body_size 50M;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_set_header X-Frame-Options SAMEORIGIN;
          proxy_buffers 256 16k;
          proxy_buffer_size 16k;
          client_body_timeout 60;
          send_timeout 300;
          lingering_timeout 5;
          proxy_connect_timeout 90;
          proxy_send_timeout 300;
          proxy_read_timeout 90s;
          proxy_pass http://m3-portal-frontend:80;
        }
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: portal-proxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: portal-proxy
  template:
    metadata:
      labels:
        app: portal-proxy
    spec:
      volumes:
        - name: portal-proxy-volume
          configMap:
            name: portal-proxy-config
      containers:
        - name: portal-proxy
          image: nginx:latest
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 80
              name: webserver
          volumeMounts:
            - name: portal-proxy-volume
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
