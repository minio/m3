// This file is part of MinIO Kubernetes Cloud
// Copyright (c) 2019 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.min.m3.public-api";
option java_outer_classname = "PublicApiProto";

package m3;

service PublicAPI {
    // Registers a new Tenant and a Tenant Admin account
    rpc RegisterTenant (RegisterAccountRequest) returns (RegisterAccountResponse) {
    }
    // Login
    rpc Login (LoginRequest) returns (LoginResponse) {
    }
    // Logout
    rpc Logout (Empty) returns (Empty) {
    }
    // Set Password Used for Signing Up a new User and Resetting a Password
    rpc SetPassword (SetPasswordRequest) returns (Empty) {
    }
    // Change Password allows to change an existing password
    rpc ChangePassword (ChangePasswordRequest) returns (Empty) {
    }
    // UserAddInvite sends an email invitation for sign up 
    rpc UserAddInvite (InviteRequest) returns (Empty) {
    }
    // UserResetPasswordInvite sends an email invitation for resetting a user's password
    rpc UserResetPasswordInvite (InviteRequest) returns (Empty) {
    }
    // ValidateInvite validates url token sent for resetting password or sign Up
    rpc ValidateInvite (ValidateInviteRequest) returns (ValidateEmailInviteResponse) {
    }

    // Returns metrics around the authenticated tenant account if the tenant is an admin or has access
    rpc Metrics (MetricsRequest) returns (MetricsResponse) {
    }

    // Bucket

    // List Buckets
    rpc ListBuckets (ListBucketsRequest) returns (ListBucketsResponse) {
    }
    // Make a bucket
    rpc MakeBucket (MakeBucketRequest) returns (Bucket) {
    }
    // Delete Bucket
    rpc DeleteBucket (DeleteBucketRequest) returns (Bucket) {
    }

    // Change Bucket access control between private and public.
    rpc ChangeBucketAccessControl (AccessControlRequest) returns (Empty) {
    }

    // User
    // List Users
    rpc UserWhoAmI (Empty) returns (WhoAmIResponse) {
    }
    rpc ListUsers (ListUsersRequest) returns (ListUsersResponse) {
    }

    // Add a User
    rpc AddUser (AddUserRequest) returns (User) {
    }

    // Disable a User
    rpc DisableUser (UserActionRequest) returns (UserActionResponse) {
    }

    // Enable a User
    rpc EnableUser (UserActionRequest) returns (UserActionResponse) {
    }
    // Remove a User
    // To be depracated
    rpc RemoveUser (UserActionRequest) returns (UserActionResponse) {
    }
    // Get details for an individual User
    rpc InfoUser (UserActionRequest) returns (User) {
    }

    // ServiceAccount

    // List ServiceAccounts
    rpc ListServiceAccounts (ListServiceAccountsRequest) returns (ListServiceAccountsResponse) {
    }

    // Generates a ServiceAccount for the given user
    // This is the only time the secret key will be returned
    rpc CreateServiceAccount (CreateServiceAccountRequest) returns (CreateServiceAccountResponse) {
    }
    // Disable a ServiceAccount
    rpc DisableServiceAccount (ServiceAccountActionRequest) returns (ServiceAccount) {
    }

    // Enable a ServiceAccount
    rpc EnableServiceAccount (ServiceAccountActionRequest) returns (ServiceAccount) {
    }
    // Remove a ServiceAccount
    rpc RemoveServiceAccount (ServiceAccountActionRequest) returns (Empty) {
    }
    // Get details of an individual ServiceAccount
    rpc InfoServiceAccount (ServiceAccountActionRequest) returns (InfoServiceAccountResponse) {
    }
    // Updates a Service Account with the selected permissions
    rpc UpdateServiceAccount (UpdateServiceAccountRequest)returns (InfoServiceAccountResponse){
    }
    // Assign multiple permissions to this service account
    rpc AssignPermissionsToServiceAccount (AddPermissionsSARequest) returns (Empty) {
    }

    // Permission

    // List Permissions
    rpc ListPermissions (ListPermissionsRequest) returns (ListPermissionsResponse) {
    }

    // Add a Permission
    rpc AddPermission (AddPermissionRequest) returns (Permission) {
    }

    // Remove a Permission
    rpc RemovePermission (PermissionActionRequest) returns (Empty) {
    }

    // Update a Permission
    rpc UpdatePermission (UpdatePermissionRequest) returns (Permission) {
    }
    // Get details of a Permission
    rpc InfoPermission (PermissionActionRequest) returns (Permission) {
    }

    // Assign this permission to multiple service accounts
    rpc AssignPermissionToMultipleServiceAccounts (MultiAddPermissionToSAsRequest) returns (MultiAddPermissionToSAsResponse) {
    }

}
// Empty message for services that rely on headers
message Empty {
}

// Message containing details of the Tenant Admin and the tenant that is going to be created
message RegisterAccountRequest {
    string full_name = 1;
    string company = 2;
    string company_short_name = 3;
    string email = 4;
    string password = 5;
}

// Response on whether the account was created or not
message RegisterAccountResponse {
    string error = 1;
    string jwt_token = 2;
}

message LoginRequest {
    string company = 1;
    string email = 2;
    string password = 3;
}

message LoginResponse {
    string error = 1;
    string jwt_token = 2;
}

// Used for Signing Up a new User and Resetting a Password
message SetPasswordRequest {
    string url_token = 1;
    string password = 2;
}

message ChangePasswordRequest {
    string old_password = 1;
    string new_password = 2;
}

// Sends an invite to signup a new user or reset a user's password
message InviteRequest {
    string name = 1;
    string email = 2;
}

message ValidateInviteRequest {
    string url_token = 1;
}

// Once token invite is validates we return the email and company to proceed with the Signup
message ValidateEmailInviteResponse {
    string email = 1;
    string company = 2;
}

// A request for metrics on the authenticated tenant
message MetricsRequest {
    string query = 1;
}

// Usage per day 
message MetricsDayUsage{
    string time = 1;
    uint64 usage = 2;
}

// Capacity related metrics
message MetricsResponse {
    // total number of buckets on the account
    uint64 total_buckets = 1;
    // A number of bytes representing the total usage on the account
    uint64 total_usage = 2;
    // Cost per usage
    int32 total_cost = 3;
    // daily usage
    repeated MetricsDayUsage daily_usage = 4;
    // flag to decide to show cost or not on UI
    bool show_cost = 5;
}

// Networking related metrics
message NetworkMetrics {
    // Current period amount of egress
    int64 current_egress = 1;
}

// Request what buckets the current tenant user can see
message ListBucketsRequest {
    string sort_by = 1;
    int32 offset = 2;
    // a query to filter buckets with
    string query = 3;
}

message ListBucketsResponse {
    // if any error, like user not allowed to list buckets
    string error = 1;
    // list of resulting buckets
    repeated Bucket buckets = 2;
    // number of buckets accessible to tenant user
    int32 total_buckets = 3;
}

message Bucket {
    string name = 1;
    int64 size = 2;
    Access access = 3;
}

enum Access {
    PRIVATE = 0;
    PUBLIC = 1;
    CUSTOM = 2;
}


message MakeBucketRequest {
    string name = 1;
    Access access = 2;
}

message DeleteBucketRequest {
    string name = 1;
}


message AccessControlRequest {
    string name = 1;
    Access access = 2;
}

message User {
    string name = 1;
    string email = 2;
    string id = 3;
    bool enabled = 4;
}

// Request a list of users on the tenant account
message ListUsersRequest {
    string sort_by = 1;
    int32 offset = 2;
    // a query to filter users with
    string query = 3;
    // max number of results per request
    int32 limit = 4;
}

// Request a list of users on the tenant account
message ListUsersResponse {
    // if any error, like user not allowed to list users
    string error = 1;
    // list of resulting users
    repeated User users = 2;
    // number of users on the tenant account
    int32 total_users = 3;
}

message AddUserRequest {
    string name = 1;
    string email = 2;
    // optional
    string password = 3;
}

message UserActionRequest {
    string id = 1;
}

message UserActionResponse {
    string status = 1;
}

// Request a list of ServiceAccounts on the tenant account
message ListServiceAccountsRequest {
    string sort_by = 1;
    int32 offset = 2;
    // a query to filter ServiceAccounts with
    string query = 3;
    int32 limit =4;
}

// Request a list of ServiceAccounts on the tenant account
message ListServiceAccountsResponse {
    // list of resulting ServiceAccounts
    repeated ServiceAccount service_accounts = 1;
    // number of ServiceAccounts on the tenant account
    int32 total = 2;
}

message ServiceAccount {
    string id = 1;
    string name = 2;
    // Identifier for the ServiceAccount
    string access_key = 3;
    // State of the ServiceAccount
    bool enabled = 4;
}

message ServiceAccountActionRequest {
    string id = 1;
}

message InfoServiceAccountResponse{
    ServiceAccount service_account = 1;
    repeated Permission permissions = 2;
}

message CreateServiceAccountRequest {
    string name = 1;
    repeated string permission_ids = 2;
}

message CreateServiceAccountResponse {
    ServiceAccount service_account = 1;
    // secret_key will be shown only when creating a service account
    string secret_key = 2;
}

message UpdateServiceAccountRequest{
    string id = 1;
    bool enabled = 2;
    string name = 3;
    repeated string permission_ids = 4;
}

// Request a list of Permissions on the tenant account
message ListPermissionsRequest {
    string sort_by = 1;
    int64 offset = 2;
    int32 limit = 4;
}

// Request a list of Permissions on the tenant account
message ListPermissionsResponse {
    // list of resulting Permissions
    repeated Permission permissions = 1;
    // number of Permissions on the tenant account
    int32 total = 2;
}


message AddPermissionRequest{
    string name = 1;
    string description = 2;
    string effect = 3;
    repeated string resources = 4;
    repeated string actions = 5;
}

message UpdatePermissionRequest{
    string id = 1;
    string name = 2;
    string description = 3;
    string effect = 4;
    repeated string resources = 5;
    repeated string actions = 6;
}

// Permission resource
message Permission {
    string id = 1;
    string name = 2;
    string slug = 3;
    string description = 4;
    string effect = 5;
    repeated PermissionResource resources = 6;
    repeated PermissionAction actions = 7;
}

message PermissionResource {
    string id = 1;
    string bucket_name = 2;
    string pattern = 3;
}

message PermissionAction{
    string id = 1;
    string type = 2;
}


message PermissionActionRequest {
    // Identifier for the Permission
    string id = 1;
}

message AddPermissionsSARequest {
    string id = 1;
    // list of permission id, an absence of a permission_id means it's not desired and should be removed
    // from the assigned list
    repeated string permission_id = 2;
}

message MultiAddPermissionToSAsRequest {
    string id = 1;
    repeated string service_account_id = 2;
}

message MultiAddPermissionToSAsResponse {
    string error = 1;
    string status = 2;
}

message WhoAmIResponse {
    User user = 1;
    string company = 2;
}
