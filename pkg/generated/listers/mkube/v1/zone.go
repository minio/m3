// This file is part of MinIO Kubernetes Cloud
// Copyright (c) 2019 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/minio/m3/pkg/apis/mkube/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ZoneLister helps list Zones.
type ZoneLister interface {
	// List lists all Zones in the indexer.
	List(selector labels.Selector) (ret []*v1.Zone, err error)
	// Zones returns an object that can list and get Zones.
	Zones(namespace string) ZoneNamespaceLister
	ZoneListerExpansion
}

// zoneLister implements the ZoneLister interface.
type zoneLister struct {
	indexer cache.Indexer
}

// NewZoneLister returns a new ZoneLister.
func NewZoneLister(indexer cache.Indexer) ZoneLister {
	return &zoneLister{indexer: indexer}
}

// List lists all Zones in the indexer.
func (s *zoneLister) List(selector labels.Selector) (ret []*v1.Zone, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Zone))
	})
	return ret, err
}

// Zones returns an object that can list and get Zones.
func (s *zoneLister) Zones(namespace string) ZoneNamespaceLister {
	return zoneNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ZoneNamespaceLister helps list and get Zones.
type ZoneNamespaceLister interface {
	// List lists all Zones in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Zone, err error)
	// Get retrieves the Zone from the indexer for a given namespace and name.
	Get(name string) (*v1.Zone, error)
	ZoneNamespaceListerExpansion
}

// zoneNamespaceLister implements the ZoneNamespaceLister
// interface.
type zoneNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Zones in the indexer for a given namespace.
func (s zoneNamespaceLister) List(selector labels.Selector) (ret []*v1.Zone, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Zone))
	})
	return ret, err
}

// Get retrieves the Zone from the indexer for a given namespace and name.
func (s zoneNamespaceLister) Get(name string) (*v1.Zone, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("zone"), name)
	}
	return obj.(*v1.Zone), nil
}
