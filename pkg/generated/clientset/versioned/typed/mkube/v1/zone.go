// This file is part of MinIO Kubernetes Cloud
// Copyright (c) 2019 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"time"

	v1 "github.com/minio/m3/pkg/apis/mkube/v1"
	scheme "github.com/minio/m3/pkg/generated/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// ZonesGetter has a method to return a ZoneInterface.
// A group's client should implement this interface.
type ZonesGetter interface {
	Zones(namespace string) ZoneInterface
}

// ZoneInterface has methods to work with Zone resources.
type ZoneInterface interface {
	Create(*v1.Zone) (*v1.Zone, error)
	Update(*v1.Zone) (*v1.Zone, error)
	UpdateStatus(*v1.Zone) (*v1.Zone, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v1.Zone, error)
	List(opts metav1.ListOptions) (*v1.ZoneList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Zone, err error)
	ZoneExpansion
}

// zones implements ZoneInterface
type zones struct {
	client rest.Interface
	ns     string
}

// newZones returns a Zones
func newZones(c *MkubeV1Client, namespace string) *zones {
	return &zones{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the zone, and returns the corresponding zone object, and an error if there is any.
func (c *zones) Get(name string, options metav1.GetOptions) (result *v1.Zone, err error) {
	result = &v1.Zone{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("zones").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of Zones that match those selectors.
func (c *zones) List(opts metav1.ListOptions) (result *v1.ZoneList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.ZoneList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("zones").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested zones.
func (c *zones) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("zones").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a zone and creates it.  Returns the server's representation of the zone, and an error, if there is any.
func (c *zones) Create(zone *v1.Zone) (result *v1.Zone, err error) {
	result = &v1.Zone{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("zones").
		Body(zone).
		Do().
		Into(result)
	return
}

// Update takes the representation of a zone and updates it. Returns the server's representation of the zone, and an error, if there is any.
func (c *zones) Update(zone *v1.Zone) (result *v1.Zone, err error) {
	result = &v1.Zone{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("zones").
		Name(zone.Name).
		Body(zone).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *zones) UpdateStatus(zone *v1.Zone) (result *v1.Zone, err error) {
	result = &v1.Zone{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("zones").
		Name(zone.Name).
		SubResource("status").
		Body(zone).
		Do().
		Into(result)
	return
}

// Delete takes name of the zone and deletes it. Returns an error if one occurs.
func (c *zones) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("zones").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *zones) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("zones").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched zone.
func (c *zones) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Zone, err error) {
	result = &v1.Zone{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("zones").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
