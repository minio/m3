// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// M3MetricsResponse Capacity related metrics
// swagger:model m3MetricsResponse
type M3MetricsResponse struct {

	// daily usage
	DailyUsage []*M3MetricsDayUsage `json:"daily_usage"`

	// flag to decide to show cost or not on UI
	ShowCost bool `json:"show_cost,omitempty"`

	// total number of buckets on the account
	TotalBuckets string `json:"total_buckets,omitempty"`

	// Cost per usage
	TotalCost int32 `json:"total_cost,omitempty"`

	// A number of bytes representing the total usage on the account
	TotalUsage string `json:"total_usage,omitempty"`
}

// Validate validates this m3 metrics response
func (m *M3MetricsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDailyUsage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *M3MetricsResponse) validateDailyUsage(formats strfmt.Registry) error {

	if swag.IsZero(m.DailyUsage) { // not required
		return nil
	}

	for i := 0; i < len(m.DailyUsage); i++ {
		if swag.IsZero(m.DailyUsage[i]) { // not required
			continue
		}

		if m.DailyUsage[i] != nil {
			if err := m.DailyUsage[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("daily_usage" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *M3MetricsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *M3MetricsResponse) UnmarshalBinary(b []byte) error {
	var res M3MetricsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
