// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/minio/m3/portal/models"
	"github.com/minio/m3/portal/restapi/operations/public_api"
)

// NewPortalAPI creates a new Portal instance
func NewPortalAPI(spec *loads.Document) *PortalAPI {
	return &PortalAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		PublicAPIAddPermissionHandler: public_api.AddPermissionHandlerFunc(func(params public_api.AddPermissionParams) middleware.Responder {
			return middleware.NotImplemented("operation public_api.AddPermission has not yet been implemented")
		}),
		PublicAPIAddUserHandler: public_api.AddUserHandlerFunc(func(params public_api.AddUserParams) middleware.Responder {
			return middleware.NotImplemented("operation public_api.AddUser has not yet been implemented")
		}),
		PublicAPIAssignPermissionToMultipleServiceAccountsHandler: public_api.AssignPermissionToMultipleServiceAccountsHandlerFunc(func(params public_api.AssignPermissionToMultipleServiceAccountsParams) middleware.Responder {
			return middleware.NotImplemented("operation public_api.AssignPermissionToMultipleServiceAccounts has not yet been implemented")
		}),
		PublicAPIAssignPermissionsToServiceAccountHandler: public_api.AssignPermissionsToServiceAccountHandlerFunc(func(params public_api.AssignPermissionsToServiceAccountParams) middleware.Responder {
			return middleware.NotImplemented("operation public_api.AssignPermissionsToServiceAccount has not yet been implemented")
		}),
		PublicAPIChangeBucketAccessControlHandler: public_api.ChangeBucketAccessControlHandlerFunc(func(params public_api.ChangeBucketAccessControlParams) middleware.Responder {
			return middleware.NotImplemented("operation public_api.ChangeBucketAccessControl has not yet been implemented")
		}),
		PublicAPIChangePasswordHandler: public_api.ChangePasswordHandlerFunc(func(params public_api.ChangePasswordParams) middleware.Responder {
			return middleware.NotImplemented("operation public_api.ChangePassword has not yet been implemented")
		}),
		PublicAPICreateServiceAccountHandler: public_api.CreateServiceAccountHandlerFunc(func(params public_api.CreateServiceAccountParams) middleware.Responder {
			return middleware.NotImplemented("operation public_api.CreateServiceAccount has not yet been implemented")
		}),
		PublicAPIDeleteBucketHandler: public_api.DeleteBucketHandlerFunc(func(params public_api.DeleteBucketParams) middleware.Responder {
			return middleware.NotImplemented("operation public_api.DeleteBucket has not yet been implemented")
		}),
		PublicAPIDisableServiceAccountHandler: public_api.DisableServiceAccountHandlerFunc(func(params public_api.DisableServiceAccountParams) middleware.Responder {
			return middleware.NotImplemented("operation public_api.DisableServiceAccount has not yet been implemented")
		}),
		PublicAPIDisableUserHandler: public_api.DisableUserHandlerFunc(func(params public_api.DisableUserParams) middleware.Responder {
			return middleware.NotImplemented("operation public_api.DisableUser has not yet been implemented")
		}),
		PublicAPIEnableServiceAccountHandler: public_api.EnableServiceAccountHandlerFunc(func(params public_api.EnableServiceAccountParams) middleware.Responder {
			return middleware.NotImplemented("operation public_api.EnableServiceAccount has not yet been implemented")
		}),
		PublicAPIEnableUserHandler: public_api.EnableUserHandlerFunc(func(params public_api.EnableUserParams) middleware.Responder {
			return middleware.NotImplemented("operation public_api.EnableUser has not yet been implemented")
		}),
		PublicAPIForgotPasswordHandler: public_api.ForgotPasswordHandlerFunc(func(params public_api.ForgotPasswordParams) middleware.Responder {
			return middleware.NotImplemented("operation public_api.ForgotPassword has not yet been implemented")
		}),
		PublicAPIInfoPermissionHandler: public_api.InfoPermissionHandlerFunc(func(params public_api.InfoPermissionParams) middleware.Responder {
			return middleware.NotImplemented("operation public_api.InfoPermission has not yet been implemented")
		}),
		PublicAPIInfoServiceAccountHandler: public_api.InfoServiceAccountHandlerFunc(func(params public_api.InfoServiceAccountParams) middleware.Responder {
			return middleware.NotImplemented("operation public_api.InfoServiceAccount has not yet been implemented")
		}),
		PublicAPIInfoUserHandler: public_api.InfoUserHandlerFunc(func(params public_api.InfoUserParams) middleware.Responder {
			return middleware.NotImplemented("operation public_api.InfoUser has not yet been implemented")
		}),
		PublicAPIListBucketsHandler: public_api.ListBucketsHandlerFunc(func(params public_api.ListBucketsParams) middleware.Responder {
			return middleware.NotImplemented("operation public_api.ListBuckets has not yet been implemented")
		}),
		PublicAPIListPermissionsHandler: public_api.ListPermissionsHandlerFunc(func(params public_api.ListPermissionsParams) middleware.Responder {
			return middleware.NotImplemented("operation public_api.ListPermissions has not yet been implemented")
		}),
		PublicAPIListServiceAccountsHandler: public_api.ListServiceAccountsHandlerFunc(func(params public_api.ListServiceAccountsParams) middleware.Responder {
			return middleware.NotImplemented("operation public_api.ListServiceAccounts has not yet been implemented")
		}),
		PublicAPIListUsersHandler: public_api.ListUsersHandlerFunc(func(params public_api.ListUsersParams) middleware.Responder {
			return middleware.NotImplemented("operation public_api.ListUsers has not yet been implemented")
		}),
		PublicAPILoginHandler: public_api.LoginHandlerFunc(func(params public_api.LoginParams) middleware.Responder {
			return middleware.NotImplemented("operation public_api.Login has not yet been implemented")
		}),
		PublicAPILogoutHandler: public_api.LogoutHandlerFunc(func(params public_api.LogoutParams) middleware.Responder {
			return middleware.NotImplemented("operation public_api.Logout has not yet been implemented")
		}),
		PublicAPIMakeBucketHandler: public_api.MakeBucketHandlerFunc(func(params public_api.MakeBucketParams) middleware.Responder {
			return middleware.NotImplemented("operation public_api.MakeBucket has not yet been implemented")
		}),
		PublicAPIMetricsHandler: public_api.MetricsHandlerFunc(func(params public_api.MetricsParams) middleware.Responder {
			return middleware.NotImplemented("operation public_api.Metrics has not yet been implemented")
		}),
		PublicAPIRegisterTenantHandler: public_api.RegisterTenantHandlerFunc(func(params public_api.RegisterTenantParams) middleware.Responder {
			return middleware.NotImplemented("operation public_api.RegisterTenant has not yet been implemented")
		}),
		PublicAPIRemovePermissionHandler: public_api.RemovePermissionHandlerFunc(func(params public_api.RemovePermissionParams) middleware.Responder {
			return middleware.NotImplemented("operation public_api.RemovePermission has not yet been implemented")
		}),
		PublicAPIRemoveServiceAccountHandler: public_api.RemoveServiceAccountHandlerFunc(func(params public_api.RemoveServiceAccountParams) middleware.Responder {
			return middleware.NotImplemented("operation public_api.RemoveServiceAccount has not yet been implemented")
		}),
		PublicAPIRemoveUserHandler: public_api.RemoveUserHandlerFunc(func(params public_api.RemoveUserParams) middleware.Responder {
			return middleware.NotImplemented("operation public_api.RemoveUser has not yet been implemented")
		}),
		PublicAPISetPasswordHandler: public_api.SetPasswordHandlerFunc(func(params public_api.SetPasswordParams) middleware.Responder {
			return middleware.NotImplemented("operation public_api.SetPassword has not yet been implemented")
		}),
		PublicAPIUpdatePermissionHandler: public_api.UpdatePermissionHandlerFunc(func(params public_api.UpdatePermissionParams) middleware.Responder {
			return middleware.NotImplemented("operation public_api.UpdatePermission has not yet been implemented")
		}),
		PublicAPIUpdateServiceAccountHandler: public_api.UpdateServiceAccountHandlerFunc(func(params public_api.UpdateServiceAccountParams) middleware.Responder {
			return middleware.NotImplemented("operation public_api.UpdateServiceAccount has not yet been implemented")
		}),
		PublicAPIUserAddInviteHandler: public_api.UserAddInviteHandlerFunc(func(params public_api.UserAddInviteParams) middleware.Responder {
			return middleware.NotImplemented("operation public_api.UserAddInvite has not yet been implemented")
		}),
		PublicAPIUserResetPasswordInviteHandler: public_api.UserResetPasswordInviteHandlerFunc(func(params public_api.UserResetPasswordInviteParams) middleware.Responder {
			return middleware.NotImplemented("operation public_api.UserResetPasswordInvite has not yet been implemented")
		}),
		PublicAPIUserWhoAmIHandler: public_api.UserWhoAmIHandlerFunc(func(params public_api.UserWhoAmIParams) middleware.Responder {
			return middleware.NotImplemented("operation public_api.UserWhoAmI has not yet been implemented")
		}),
		PublicAPIValidateInviteHandler: public_api.ValidateInviteHandlerFunc(func(params public_api.ValidateInviteParams) middleware.Responder {
			return middleware.NotImplemented("operation public_api.ValidateInvite has not yet been implemented")
		}),
		PublicAPIVersionHandler: public_api.VersionHandlerFunc(func(params public_api.VersionParams) middleware.Responder {
			return public_api.NewVersionOK().WithPayload(&models.M3VersionResponse{
				Components: map[string]string{
					"m3":         "0.1",
					"build_time": "Tue Feb 25 14:12:42 PST 2020",
				},
			})
		}),
	}
}

/*PortalAPI the portal API */
type PortalAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator
	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer
	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// PublicAPIAddPermissionHandler sets the operation handler for the add permission operation
	PublicAPIAddPermissionHandler public_api.AddPermissionHandler
	// PublicAPIAddUserHandler sets the operation handler for the add user operation
	PublicAPIAddUserHandler public_api.AddUserHandler
	// PublicAPIAssignPermissionToMultipleServiceAccountsHandler sets the operation handler for the assign permission to multiple service accounts operation
	PublicAPIAssignPermissionToMultipleServiceAccountsHandler public_api.AssignPermissionToMultipleServiceAccountsHandler
	// PublicAPIAssignPermissionsToServiceAccountHandler sets the operation handler for the assign permissions to service account operation
	PublicAPIAssignPermissionsToServiceAccountHandler public_api.AssignPermissionsToServiceAccountHandler
	// PublicAPIChangeBucketAccessControlHandler sets the operation handler for the change bucket access control operation
	PublicAPIChangeBucketAccessControlHandler public_api.ChangeBucketAccessControlHandler
	// PublicAPIChangePasswordHandler sets the operation handler for the change password operation
	PublicAPIChangePasswordHandler public_api.ChangePasswordHandler
	// PublicAPICreateServiceAccountHandler sets the operation handler for the create service account operation
	PublicAPICreateServiceAccountHandler public_api.CreateServiceAccountHandler
	// PublicAPIDeleteBucketHandler sets the operation handler for the delete bucket operation
	PublicAPIDeleteBucketHandler public_api.DeleteBucketHandler
	// PublicAPIDisableServiceAccountHandler sets the operation handler for the disable service account operation
	PublicAPIDisableServiceAccountHandler public_api.DisableServiceAccountHandler
	// PublicAPIDisableUserHandler sets the operation handler for the disable user operation
	PublicAPIDisableUserHandler public_api.DisableUserHandler
	// PublicAPIEnableServiceAccountHandler sets the operation handler for the enable service account operation
	PublicAPIEnableServiceAccountHandler public_api.EnableServiceAccountHandler
	// PublicAPIEnableUserHandler sets the operation handler for the enable user operation
	PublicAPIEnableUserHandler public_api.EnableUserHandler
	// PublicAPIForgotPasswordHandler sets the operation handler for the forgot password operation
	PublicAPIForgotPasswordHandler public_api.ForgotPasswordHandler
	// PublicAPIInfoPermissionHandler sets the operation handler for the info permission operation
	PublicAPIInfoPermissionHandler public_api.InfoPermissionHandler
	// PublicAPIInfoServiceAccountHandler sets the operation handler for the info service account operation
	PublicAPIInfoServiceAccountHandler public_api.InfoServiceAccountHandler
	// PublicAPIInfoUserHandler sets the operation handler for the info user operation
	PublicAPIInfoUserHandler public_api.InfoUserHandler
	// PublicAPIListBucketsHandler sets the operation handler for the list buckets operation
	PublicAPIListBucketsHandler public_api.ListBucketsHandler
	// PublicAPIListPermissionsHandler sets the operation handler for the list permissions operation
	PublicAPIListPermissionsHandler public_api.ListPermissionsHandler
	// PublicAPIListServiceAccountsHandler sets the operation handler for the list service accounts operation
	PublicAPIListServiceAccountsHandler public_api.ListServiceAccountsHandler
	// PublicAPIListUsersHandler sets the operation handler for the list users operation
	PublicAPIListUsersHandler public_api.ListUsersHandler
	// PublicAPILoginHandler sets the operation handler for the login operation
	PublicAPILoginHandler public_api.LoginHandler
	// PublicAPILogoutHandler sets the operation handler for the logout operation
	PublicAPILogoutHandler public_api.LogoutHandler
	// PublicAPIMakeBucketHandler sets the operation handler for the make bucket operation
	PublicAPIMakeBucketHandler public_api.MakeBucketHandler
	// PublicAPIMetricsHandler sets the operation handler for the metrics operation
	PublicAPIMetricsHandler public_api.MetricsHandler
	// PublicAPIRegisterTenantHandler sets the operation handler for the register tenant operation
	PublicAPIRegisterTenantHandler public_api.RegisterTenantHandler
	// PublicAPIRemovePermissionHandler sets the operation handler for the remove permission operation
	PublicAPIRemovePermissionHandler public_api.RemovePermissionHandler
	// PublicAPIRemoveServiceAccountHandler sets the operation handler for the remove service account operation
	PublicAPIRemoveServiceAccountHandler public_api.RemoveServiceAccountHandler
	// PublicAPIRemoveUserHandler sets the operation handler for the remove user operation
	PublicAPIRemoveUserHandler public_api.RemoveUserHandler
	// PublicAPISetPasswordHandler sets the operation handler for the set password operation
	PublicAPISetPasswordHandler public_api.SetPasswordHandler
	// PublicAPIUpdatePermissionHandler sets the operation handler for the update permission operation
	PublicAPIUpdatePermissionHandler public_api.UpdatePermissionHandler
	// PublicAPIUpdateServiceAccountHandler sets the operation handler for the update service account operation
	PublicAPIUpdateServiceAccountHandler public_api.UpdateServiceAccountHandler
	// PublicAPIUserAddInviteHandler sets the operation handler for the user add invite operation
	PublicAPIUserAddInviteHandler public_api.UserAddInviteHandler
	// PublicAPIUserResetPasswordInviteHandler sets the operation handler for the user reset password invite operation
	PublicAPIUserResetPasswordInviteHandler public_api.UserResetPasswordInviteHandler
	// PublicAPIUserWhoAmIHandler sets the operation handler for the user who am i operation
	PublicAPIUserWhoAmIHandler public_api.UserWhoAmIHandler
	// PublicAPIValidateInviteHandler sets the operation handler for the validate invite operation
	PublicAPIValidateInviteHandler public_api.ValidateInviteHandler
	// PublicAPIVersionHandler sets the operation handler for the version operation
	PublicAPIVersionHandler public_api.VersionHandler
	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *PortalAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *PortalAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *PortalAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *PortalAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *PortalAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *PortalAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *PortalAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the PortalAPI
func (o *PortalAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.PublicAPIAddPermissionHandler == nil {
		unregistered = append(unregistered, "PublicAPI.AddPermissionHandler")
	}

	if o.PublicAPIAddUserHandler == nil {
		unregistered = append(unregistered, "PublicAPI.AddUserHandler")
	}

	if o.PublicAPIAssignPermissionToMultipleServiceAccountsHandler == nil {
		unregistered = append(unregistered, "PublicAPI.AssignPermissionToMultipleServiceAccountsHandler")
	}

	if o.PublicAPIAssignPermissionsToServiceAccountHandler == nil {
		unregistered = append(unregistered, "PublicAPI.AssignPermissionsToServiceAccountHandler")
	}

	if o.PublicAPIChangeBucketAccessControlHandler == nil {
		unregistered = append(unregistered, "PublicAPI.ChangeBucketAccessControlHandler")
	}

	if o.PublicAPIChangePasswordHandler == nil {
		unregistered = append(unregistered, "PublicAPI.ChangePasswordHandler")
	}

	if o.PublicAPICreateServiceAccountHandler == nil {
		unregistered = append(unregistered, "PublicAPI.CreateServiceAccountHandler")
	}

	if o.PublicAPIDeleteBucketHandler == nil {
		unregistered = append(unregistered, "PublicAPI.DeleteBucketHandler")
	}

	if o.PublicAPIDisableServiceAccountHandler == nil {
		unregistered = append(unregistered, "PublicAPI.DisableServiceAccountHandler")
	}

	if o.PublicAPIDisableUserHandler == nil {
		unregistered = append(unregistered, "PublicAPI.DisableUserHandler")
	}

	if o.PublicAPIEnableServiceAccountHandler == nil {
		unregistered = append(unregistered, "PublicAPI.EnableServiceAccountHandler")
	}

	if o.PublicAPIEnableUserHandler == nil {
		unregistered = append(unregistered, "PublicAPI.EnableUserHandler")
	}

	if o.PublicAPIForgotPasswordHandler == nil {
		unregistered = append(unregistered, "PublicAPI.ForgotPasswordHandler")
	}

	if o.PublicAPIInfoPermissionHandler == nil {
		unregistered = append(unregistered, "PublicAPI.InfoPermissionHandler")
	}

	if o.PublicAPIInfoServiceAccountHandler == nil {
		unregistered = append(unregistered, "PublicAPI.InfoServiceAccountHandler")
	}

	if o.PublicAPIInfoUserHandler == nil {
		unregistered = append(unregistered, "PublicAPI.InfoUserHandler")
	}

	if o.PublicAPIListBucketsHandler == nil {
		unregistered = append(unregistered, "PublicAPI.ListBucketsHandler")
	}

	if o.PublicAPIListPermissionsHandler == nil {
		unregistered = append(unregistered, "PublicAPI.ListPermissionsHandler")
	}

	if o.PublicAPIListServiceAccountsHandler == nil {
		unregistered = append(unregistered, "PublicAPI.ListServiceAccountsHandler")
	}

	if o.PublicAPIListUsersHandler == nil {
		unregistered = append(unregistered, "PublicAPI.ListUsersHandler")
	}

	if o.PublicAPILoginHandler == nil {
		unregistered = append(unregistered, "PublicAPI.LoginHandler")
	}

	if o.PublicAPILogoutHandler == nil {
		unregistered = append(unregistered, "PublicAPI.LogoutHandler")
	}

	if o.PublicAPIMakeBucketHandler == nil {
		unregistered = append(unregistered, "PublicAPI.MakeBucketHandler")
	}

	if o.PublicAPIMetricsHandler == nil {
		unregistered = append(unregistered, "PublicAPI.MetricsHandler")
	}

	if o.PublicAPIRegisterTenantHandler == nil {
		unregistered = append(unregistered, "PublicAPI.RegisterTenantHandler")
	}

	if o.PublicAPIRemovePermissionHandler == nil {
		unregistered = append(unregistered, "PublicAPI.RemovePermissionHandler")
	}

	if o.PublicAPIRemoveServiceAccountHandler == nil {
		unregistered = append(unregistered, "PublicAPI.RemoveServiceAccountHandler")
	}

	if o.PublicAPIRemoveUserHandler == nil {
		unregistered = append(unregistered, "PublicAPI.RemoveUserHandler")
	}

	if o.PublicAPISetPasswordHandler == nil {
		unregistered = append(unregistered, "PublicAPI.SetPasswordHandler")
	}

	if o.PublicAPIUpdatePermissionHandler == nil {
		unregistered = append(unregistered, "PublicAPI.UpdatePermissionHandler")
	}

	if o.PublicAPIUpdateServiceAccountHandler == nil {
		unregistered = append(unregistered, "PublicAPI.UpdateServiceAccountHandler")
	}

	if o.PublicAPIUserAddInviteHandler == nil {
		unregistered = append(unregistered, "PublicAPI.UserAddInviteHandler")
	}

	if o.PublicAPIUserResetPasswordInviteHandler == nil {
		unregistered = append(unregistered, "PublicAPI.UserResetPasswordInviteHandler")
	}

	if o.PublicAPIUserWhoAmIHandler == nil {
		unregistered = append(unregistered, "PublicAPI.UserWhoAmIHandler")
	}

	if o.PublicAPIValidateInviteHandler == nil {
		unregistered = append(unregistered, "PublicAPI.ValidateInviteHandler")
	}

	if o.PublicAPIVersionHandler == nil {
		unregistered = append(unregistered, "PublicAPI.VersionHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *PortalAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *PortalAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *PortalAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *PortalAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *PortalAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *PortalAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the portal API
func (o *PortalAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *PortalAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/permissions"] = public_api.NewAddPermission(o.context, o.PublicAPIAddPermissionHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/users"] = public_api.NewAddUser(o.context, o.PublicAPIAddUserHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/permissions/{id}/assign_to_service_accounts"] = public_api.NewAssignPermissionToMultipleServiceAccounts(o.context, o.PublicAPIAssignPermissionToMultipleServiceAccountsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/service_accounts/{id}/assign_permissions"] = public_api.NewAssignPermissionsToServiceAccount(o.context, o.PublicAPIAssignPermissionsToServiceAccountHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/buckets/{name}/access_control"] = public_api.NewChangeBucketAccessControl(o.context, o.PublicAPIChangeBucketAccessControlHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/api/v1/users/change_password"] = public_api.NewChangePassword(o.context, o.PublicAPIChangePasswordHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/service_accounts"] = public_api.NewCreateServiceAccount(o.context, o.PublicAPICreateServiceAccountHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/buckets/{name}"] = public_api.NewDeleteBucket(o.context, o.PublicAPIDeleteBucketHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/service_accounts/{id}/disable"] = public_api.NewDisableServiceAccount(o.context, o.PublicAPIDisableServiceAccountHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/users/{id}/disable"] = public_api.NewDisableUser(o.context, o.PublicAPIDisableUserHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/service_accounts/{id}/enable"] = public_api.NewEnableServiceAccount(o.context, o.PublicAPIEnableServiceAccountHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/users/{id}/enable"] = public_api.NewEnableUser(o.context, o.PublicAPIEnableUserHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/users/forgot_password"] = public_api.NewForgotPassword(o.context, o.PublicAPIForgotPasswordHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/permissions/{id}"] = public_api.NewInfoPermission(o.context, o.PublicAPIInfoPermissionHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/service_accounts/{id}"] = public_api.NewInfoServiceAccount(o.context, o.PublicAPIInfoServiceAccountHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/users/{id}"] = public_api.NewInfoUser(o.context, o.PublicAPIInfoUserHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/buckets"] = public_api.NewListBuckets(o.context, o.PublicAPIListBucketsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/permissions"] = public_api.NewListPermissions(o.context, o.PublicAPIListPermissionsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/service_accounts"] = public_api.NewListServiceAccounts(o.context, o.PublicAPIListServiceAccountsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/users"] = public_api.NewListUsers(o.context, o.PublicAPIListUsersHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/users/login"] = public_api.NewLogin(o.context, o.PublicAPILoginHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/users/logout"] = public_api.NewLogout(o.context, o.PublicAPILogoutHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/buckets"] = public_api.NewMakeBucket(o.context, o.PublicAPIMakeBucketHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/metrics"] = public_api.NewMetrics(o.context, o.PublicAPIMetricsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/accounts/signup"] = public_api.NewRegisterTenant(o.context, o.PublicAPIRegisterTenantHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/permissions/{id}"] = public_api.NewRemovePermission(o.context, o.PublicAPIRemovePermissionHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/service_accounts/{id}"] = public_api.NewRemoveServiceAccount(o.context, o.PublicAPIRemoveServiceAccountHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/users/{id}"] = public_api.NewRemoveUser(o.context, o.PublicAPIRemoveUserHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/users/set_password"] = public_api.NewSetPassword(o.context, o.PublicAPISetPasswordHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/permissions/{id}"] = public_api.NewUpdatePermission(o.context, o.PublicAPIUpdatePermissionHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/service_accounts/{id}"] = public_api.NewUpdateServiceAccount(o.context, o.PublicAPIUpdateServiceAccountHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/users/add_invite"] = public_api.NewUserAddInvite(o.context, o.PublicAPIUserAddInviteHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/users/reset_invite"] = public_api.NewUserResetPasswordInvite(o.context, o.PublicAPIUserResetPasswordInviteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/users/whoami"] = public_api.NewUserWhoAmI(o.context, o.PublicAPIUserWhoAmIHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/validate_invite"] = public_api.NewValidateInvite(o.context, o.PublicAPIValidateInviteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/version"] = public_api.NewVersion(o.context, o.PublicAPIVersionHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *PortalAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *PortalAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *PortalAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *PortalAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
