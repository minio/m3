// Code generated by go-swagger; DO NOT EDIT.

package public_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/minio/m3/portal/models"
)

// AssignPermissionToMultipleServiceAccountsOKCode is the HTTP code returned for type AssignPermissionToMultipleServiceAccountsOK
const AssignPermissionToMultipleServiceAccountsOKCode int = 200

/*AssignPermissionToMultipleServiceAccountsOK A successful response.

swagger:response assignPermissionToMultipleServiceAccountsOK
*/
type AssignPermissionToMultipleServiceAccountsOK struct {

	/*
	  In: Body
	*/
	Payload *models.M3MultiAddPermissionToSAsResponse `json:"body,omitempty"`
}

// NewAssignPermissionToMultipleServiceAccountsOK creates AssignPermissionToMultipleServiceAccountsOK with default headers values
func NewAssignPermissionToMultipleServiceAccountsOK() *AssignPermissionToMultipleServiceAccountsOK {

	return &AssignPermissionToMultipleServiceAccountsOK{}
}

// WithPayload adds the payload to the assign permission to multiple service accounts o k response
func (o *AssignPermissionToMultipleServiceAccountsOK) WithPayload(payload *models.M3MultiAddPermissionToSAsResponse) *AssignPermissionToMultipleServiceAccountsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the assign permission to multiple service accounts o k response
func (o *AssignPermissionToMultipleServiceAccountsOK) SetPayload(payload *models.M3MultiAddPermissionToSAsResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AssignPermissionToMultipleServiceAccountsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
