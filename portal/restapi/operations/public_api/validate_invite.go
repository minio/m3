// Code generated by go-swagger; DO NOT EDIT.

package public_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ValidateInviteHandlerFunc turns a function with the right signature into a validate invite handler
type ValidateInviteHandlerFunc func(ValidateInviteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ValidateInviteHandlerFunc) Handle(params ValidateInviteParams) middleware.Responder {
	return fn(params)
}

// ValidateInviteHandler interface for that can handle valid validate invite params
type ValidateInviteHandler interface {
	Handle(ValidateInviteParams) middleware.Responder
}

// NewValidateInvite creates a new http.Handler for the validate invite operation
func NewValidateInvite(ctx *middleware.Context, handler ValidateInviteHandler) *ValidateInvite {
	return &ValidateInvite{Context: ctx, Handler: handler}
}

/*ValidateInvite swagger:route POST /api/v1/validate_invite PublicAPI validateInvite

ValidateInvite validates url token sent for resetting password or sign Up

*/
type ValidateInvite struct {
	Context *middleware.Context
	Handler ValidateInviteHandler
}

func (o *ValidateInvite) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewValidateInviteParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
