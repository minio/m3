// Code generated by go-swagger; DO NOT EDIT.

package public_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// RemoveServiceAccountHandlerFunc turns a function with the right signature into a remove service account handler
type RemoveServiceAccountHandlerFunc func(RemoveServiceAccountParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RemoveServiceAccountHandlerFunc) Handle(params RemoveServiceAccountParams) middleware.Responder {
	return fn(params)
}

// RemoveServiceAccountHandler interface for that can handle valid remove service account params
type RemoveServiceAccountHandler interface {
	Handle(RemoveServiceAccountParams) middleware.Responder
}

// NewRemoveServiceAccount creates a new http.Handler for the remove service account operation
func NewRemoveServiceAccount(ctx *middleware.Context, handler RemoveServiceAccountHandler) *RemoveServiceAccount {
	return &RemoveServiceAccount{Context: ctx, Handler: handler}
}

/*RemoveServiceAccount swagger:route DELETE /api/v1/service_accounts/{id} PublicAPI removeServiceAccount

Remove a Service Account

*/
type RemoveServiceAccount struct {
	Context *middleware.Context
	Handler RemoveServiceAccountHandler
}

func (o *RemoveServiceAccount) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRemoveServiceAccountParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
