// Code generated by go-swagger; DO NOT EDIT.

package public_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// EnableUserHandlerFunc turns a function with the right signature into a enable user handler
type EnableUserHandlerFunc func(EnableUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn EnableUserHandlerFunc) Handle(params EnableUserParams) middleware.Responder {
	return fn(params)
}

// EnableUserHandler interface for that can handle valid enable user params
type EnableUserHandler interface {
	Handle(EnableUserParams) middleware.Responder
}

// NewEnableUser creates a new http.Handler for the enable user operation
func NewEnableUser(ctx *middleware.Context, handler EnableUserHandler) *EnableUser {
	return &EnableUser{Context: ctx, Handler: handler}
}

/*EnableUser swagger:route POST /api/v1/users/{id}/enable PublicAPI enableUser

Enable a User

*/
type EnableUser struct {
	Context *middleware.Context
	Handler EnableUserHandler
}

func (o *EnableUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewEnableUserParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
