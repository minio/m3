// Code generated by go-swagger; DO NOT EDIT.

package public_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// InfoServiceAccountHandlerFunc turns a function with the right signature into a info service account handler
type InfoServiceAccountHandlerFunc func(InfoServiceAccountParams) middleware.Responder

// Handle executing the request and returning a response
func (fn InfoServiceAccountHandlerFunc) Handle(params InfoServiceAccountParams) middleware.Responder {
	return fn(params)
}

// InfoServiceAccountHandler interface for that can handle valid info service account params
type InfoServiceAccountHandler interface {
	Handle(InfoServiceAccountParams) middleware.Responder
}

// NewInfoServiceAccount creates a new http.Handler for the info service account operation
func NewInfoServiceAccount(ctx *middleware.Context, handler InfoServiceAccountHandler) *InfoServiceAccount {
	return &InfoServiceAccount{Context: ctx, Handler: handler}
}

/*InfoServiceAccount swagger:route GET /api/v1/service_accounts/{id} PublicAPI infoServiceAccount

Get details of an individual Service Account

*/
type InfoServiceAccount struct {
	Context *middleware.Context
	Handler InfoServiceAccountHandler
}

func (o *InfoServiceAccount) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewInfoServiceAccountParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
