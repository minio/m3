// Code generated by go-swagger; DO NOT EDIT.

package public_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateServiceAccountHandlerFunc turns a function with the right signature into a create service account handler
type CreateServiceAccountHandlerFunc func(CreateServiceAccountParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateServiceAccountHandlerFunc) Handle(params CreateServiceAccountParams) middleware.Responder {
	return fn(params)
}

// CreateServiceAccountHandler interface for that can handle valid create service account params
type CreateServiceAccountHandler interface {
	Handle(CreateServiceAccountParams) middleware.Responder
}

// NewCreateServiceAccount creates a new http.Handler for the create service account operation
func NewCreateServiceAccount(ctx *middleware.Context, handler CreateServiceAccountHandler) *CreateServiceAccount {
	return &CreateServiceAccount{Context: ctx, Handler: handler}
}

/*CreateServiceAccount swagger:route POST /api/v1/service_accounts PublicAPI createServiceAccount

Generates a Service Account for the given user.
This is the only time the secret key will be returned

*/
type CreateServiceAccount struct {
	Context *middleware.Context
	Handler CreateServiceAccountHandler
}

func (o *CreateServiceAccount) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateServiceAccountParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
