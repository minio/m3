// Code generated by go-swagger; DO NOT EDIT.

package public_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DisableUserHandlerFunc turns a function with the right signature into a disable user handler
type DisableUserHandlerFunc func(DisableUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DisableUserHandlerFunc) Handle(params DisableUserParams) middleware.Responder {
	return fn(params)
}

// DisableUserHandler interface for that can handle valid disable user params
type DisableUserHandler interface {
	Handle(DisableUserParams) middleware.Responder
}

// NewDisableUser creates a new http.Handler for the disable user operation
func NewDisableUser(ctx *middleware.Context, handler DisableUserHandler) *DisableUser {
	return &DisableUser{Context: ctx, Handler: handler}
}

/*DisableUser swagger:route POST /api/v1/users/{id}/disable PublicAPI disableUser

Disable a User

*/
type DisableUser struct {
	Context *middleware.Context
	Handler DisableUserHandler
}

func (o *DisableUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDisableUserParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
