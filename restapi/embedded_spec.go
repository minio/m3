// Code generated by go-swagger; DO NOT EDIT.

// This file is part of MinIO Kubernetes Cloud
// Copyright (c) 2020 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "MinIO For Kubernetes",
    "version": "0.1.0"
  },
  "basePath": "/api/v1",
  "paths": {
    "/login": {
      "get": {
        "security": [],
        "tags": [
          "UserAPI"
        ],
        "summary": "Returns login strategy, form or sso.",
        "operationId": "LoginDetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/loginDetails"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "security": [],
        "tags": [
          "UserAPI"
        ],
        "summary": "Login to mcs",
        "operationId": "Login",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/loginRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful login.",
            "schema": {
              "$ref": "#/definitions/loginResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/login/oauth2/auth": {
      "post": {
        "security": [],
        "tags": [
          "UserAPI"
        ],
        "summary": "Identity Provider oauth2 callback endpoint.",
        "operationId": "LoginOauth2Auth",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/loginOauth2AuthRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful login.",
            "schema": {
              "$ref": "#/definitions/loginResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/logout": {
      "post": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Logout from mcs.",
        "operationId": "Logout",
        "responses": {
          "200": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/mirror": {
      "post": {
        "security": [],
        "tags": [
          "AdminAPI"
        ],
        "summary": "Start Mirroring",
        "operationId": "StartMirroring",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/startMirroringRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/startMirroringResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/session": {
      "get": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Endpoint to check if your session is still valid",
        "operationId": "SessionCheck",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/sessionResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/storage-classes": {
      "get": {
        "security": [],
        "tags": [
          "AdminAPI"
        ],
        "summary": "List Storage Classes",
        "operationId": "ListStorageClasses",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageClasses"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/tenants": {
      "get": {
        "security": [],
        "tags": [
          "AdminAPI"
        ],
        "summary": "List Tenants",
        "operationId": "ListTenants",
        "parameters": [
          {
            "type": "string",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/listTenantsResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "security": [],
        "tags": [
          "AdminAPI"
        ],
        "summary": "Create Tenant",
        "operationId": "CreateTenant",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createTenantRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/tenants/{name}": {
      "get": {
        "security": [],
        "tags": [
          "AdminAPI"
        ],
        "summary": "Tenant Info",
        "operationId": "TenantInfo",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tenant"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "security": [],
        "tags": [
          "AdminAPI"
        ],
        "summary": "Delete Tenant",
        "operationId": "DeleteTenant",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "createTenantRequest": {
      "type": "object",
      "required": [
        "name",
        "volume_configuration"
      ],
      "properties": {
        "access_key": {
          "type": "string"
        },
        "enable_mcs": {
          "type": "boolean",
          "default": true
        },
        "enable_ssl": {
          "type": "boolean",
          "default": true
        },
        "image": {
          "type": "string"
        },
        "mounth_path": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-z0-9-]{3,63}$"
        },
        "secret_key": {
          "type": "string"
        },
        "service_name": {
          "type": "string"
        },
        "volume_configuration": {
          "type": "object",
          "required": [
            "size"
          ],
          "properties": {
            "size": {
              "type": "string"
            },
            "storage_class": {
              "type": "string"
            }
          }
        },
        "volumes_per_server": {
          "type": "integer"
        },
        "zones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/zone"
          }
        }
      }
    },
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "listTenantsResponse": {
      "type": "object",
      "properties": {
        "tenants": {
          "type": "array",
          "title": "list of resulting tenants",
          "items": {
            "$ref": "#/definitions/tenantList"
          }
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "title": "number of tenants accessible to tenant user"
        }
      }
    },
    "loginDetails": {
      "type": "object",
      "properties": {
        "loginStrategy": {
          "type": "string",
          "enum": [
            "form",
            "redirect"
          ]
        },
        "redirect": {
          "type": "string"
        }
      }
    },
    "loginOauth2AuthRequest": {
      "type": "object",
      "required": [
        "state",
        "code"
      ],
      "properties": {
        "code": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "loginRequest": {
      "type": "object",
      "required": [
        "accessKey",
        "secretKey"
      ],
      "properties": {
        "accessKey": {
          "type": "string"
        },
        "secretKey": {
          "type": "string"
        }
      }
    },
    "loginResponse": {
      "type": "object",
      "properties": {
        "sessionId": {
          "type": "string"
        }
      }
    },
    "principal": {
      "type": "string"
    },
    "sessionResponse": {
      "type": "object",
      "properties": {
        "pages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "string",
          "enum": [
            "ok"
          ]
        }
      }
    },
    "startMirroringRequest": {
      "type": "object",
      "required": [
        "host_source",
        "host_target",
        "source",
        "target"
      ],
      "properties": {
        "host_source": {
          "type": "string"
        },
        "host_target": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "mirror_flags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "source": {
          "type": "string"
        },
        "target": {
          "type": "string"
        }
      }
    },
    "startMirroringResponse": {
      "type": "object",
      "required": [
        "mirror_id"
      ],
      "properties": {
        "mirror_id": {
          "type": "string"
        }
      }
    },
    "storageClasses": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "tenant": {
      "type": "object",
      "properties": {
        "creation_date": {
          "type": "string"
        },
        "currentState": {
          "type": "string"
        },
        "instance_count": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "volume_count": {
          "type": "integer"
        },
        "volume_size": {
          "type": "integer"
        },
        "volumes_per_server": {
          "type": "integer"
        },
        "zone_count": {
          "type": "integer"
        },
        "zones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/zone"
          }
        }
      }
    },
    "tenantList": {
      "type": "object",
      "properties": {
        "creation_date": {
          "type": "string"
        },
        "currentState": {
          "type": "string"
        },
        "instance_count": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "volume_count": {
          "type": "integer"
        },
        "volume_size": {
          "type": "integer"
        },
        "zone_count": {
          "type": "integer"
        }
      }
    },
    "zone": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "servers": {
          "type": "integer"
        }
      }
    }
  },
  "securityDefinitions": {
    "key": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "http://min.io",
      "tokenUrl": "http://min.io"
    }
  },
  "security": [
    {
      "key": []
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "MinIO For Kubernetes",
    "version": "0.1.0"
  },
  "basePath": "/api/v1",
  "paths": {
    "/login": {
      "get": {
        "security": [],
        "tags": [
          "UserAPI"
        ],
        "summary": "Returns login strategy, form or sso.",
        "operationId": "LoginDetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/loginDetails"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "security": [],
        "tags": [
          "UserAPI"
        ],
        "summary": "Login to mcs",
        "operationId": "Login",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/loginRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful login.",
            "schema": {
              "$ref": "#/definitions/loginResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/login/oauth2/auth": {
      "post": {
        "security": [],
        "tags": [
          "UserAPI"
        ],
        "summary": "Identity Provider oauth2 callback endpoint.",
        "operationId": "LoginOauth2Auth",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/loginOauth2AuthRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful login.",
            "schema": {
              "$ref": "#/definitions/loginResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/logout": {
      "post": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Logout from mcs.",
        "operationId": "Logout",
        "responses": {
          "200": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/mirror": {
      "post": {
        "security": [],
        "tags": [
          "AdminAPI"
        ],
        "summary": "Start Mirroring",
        "operationId": "StartMirroring",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/startMirroringRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/startMirroringResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/session": {
      "get": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Endpoint to check if your session is still valid",
        "operationId": "SessionCheck",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/sessionResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/storage-classes": {
      "get": {
        "security": [],
        "tags": [
          "AdminAPI"
        ],
        "summary": "List Storage Classes",
        "operationId": "ListStorageClasses",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageClasses"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/tenants": {
      "get": {
        "security": [],
        "tags": [
          "AdminAPI"
        ],
        "summary": "List Tenants",
        "operationId": "ListTenants",
        "parameters": [
          {
            "type": "string",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/listTenantsResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "security": [],
        "tags": [
          "AdminAPI"
        ],
        "summary": "Create Tenant",
        "operationId": "CreateTenant",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createTenantRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/tenants/{name}": {
      "get": {
        "security": [],
        "tags": [
          "AdminAPI"
        ],
        "summary": "Tenant Info",
        "operationId": "TenantInfo",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tenant"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "security": [],
        "tags": [
          "AdminAPI"
        ],
        "summary": "Delete Tenant",
        "operationId": "DeleteTenant",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CreateTenantRequestVolumeConfiguration": {
      "type": "object",
      "required": [
        "size"
      ],
      "properties": {
        "size": {
          "type": "string"
        },
        "storage_class": {
          "type": "string"
        }
      }
    },
    "createTenantRequest": {
      "type": "object",
      "required": [
        "name",
        "volume_configuration"
      ],
      "properties": {
        "access_key": {
          "type": "string"
        },
        "enable_mcs": {
          "type": "boolean",
          "default": true
        },
        "enable_ssl": {
          "type": "boolean",
          "default": true
        },
        "image": {
          "type": "string"
        },
        "mounth_path": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-z0-9-]{3,63}$"
        },
        "secret_key": {
          "type": "string"
        },
        "service_name": {
          "type": "string"
        },
        "volume_configuration": {
          "type": "object",
          "required": [
            "size"
          ],
          "properties": {
            "size": {
              "type": "string"
            },
            "storage_class": {
              "type": "string"
            }
          }
        },
        "volumes_per_server": {
          "type": "integer"
        },
        "zones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/zone"
          }
        }
      }
    },
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "listTenantsResponse": {
      "type": "object",
      "properties": {
        "tenants": {
          "type": "array",
          "title": "list of resulting tenants",
          "items": {
            "$ref": "#/definitions/tenantList"
          }
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "title": "number of tenants accessible to tenant user"
        }
      }
    },
    "loginDetails": {
      "type": "object",
      "properties": {
        "loginStrategy": {
          "type": "string",
          "enum": [
            "form",
            "redirect"
          ]
        },
        "redirect": {
          "type": "string"
        }
      }
    },
    "loginOauth2AuthRequest": {
      "type": "object",
      "required": [
        "state",
        "code"
      ],
      "properties": {
        "code": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "loginRequest": {
      "type": "object",
      "required": [
        "accessKey",
        "secretKey"
      ],
      "properties": {
        "accessKey": {
          "type": "string"
        },
        "secretKey": {
          "type": "string"
        }
      }
    },
    "loginResponse": {
      "type": "object",
      "properties": {
        "sessionId": {
          "type": "string"
        }
      }
    },
    "principal": {
      "type": "string"
    },
    "sessionResponse": {
      "type": "object",
      "properties": {
        "pages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "string",
          "enum": [
            "ok"
          ]
        }
      }
    },
    "startMirroringRequest": {
      "type": "object",
      "required": [
        "host_source",
        "host_target",
        "source",
        "target"
      ],
      "properties": {
        "host_source": {
          "type": "string"
        },
        "host_target": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "mirror_flags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "source": {
          "type": "string"
        },
        "target": {
          "type": "string"
        }
      }
    },
    "startMirroringResponse": {
      "type": "object",
      "required": [
        "mirror_id"
      ],
      "properties": {
        "mirror_id": {
          "type": "string"
        }
      }
    },
    "storageClasses": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "tenant": {
      "type": "object",
      "properties": {
        "creation_date": {
          "type": "string"
        },
        "currentState": {
          "type": "string"
        },
        "instance_count": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "volume_count": {
          "type": "integer"
        },
        "volume_size": {
          "type": "integer"
        },
        "volumes_per_server": {
          "type": "integer"
        },
        "zone_count": {
          "type": "integer"
        },
        "zones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/zone"
          }
        }
      }
    },
    "tenantList": {
      "type": "object",
      "properties": {
        "creation_date": {
          "type": "string"
        },
        "currentState": {
          "type": "string"
        },
        "instance_count": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "volume_count": {
          "type": "integer"
        },
        "volume_size": {
          "type": "integer"
        },
        "zone_count": {
          "type": "integer"
        }
      }
    },
    "zone": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "servers": {
          "type": "integer"
        }
      }
    }
  },
  "securityDefinitions": {
    "key": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "http://min.io",
      "tokenUrl": "http://min.io"
    }
  },
  "security": [
    {
      "key": []
    }
  ]
}`))
}
